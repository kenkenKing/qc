Optimization plays a crucial role in computational finance, intending to determine optimal portfolio allocations. Typically, one forms a quadratic problem with convex constraints that is solved in a two-step manner. First, moments need to be estimated and then optimized programmatically. Herein lies the issue because of the notorious difficulty of estimating expected values of a distribution of returns. An adaptation of the problem specification removes this first moment conundrum. It focuses solely on the budgeting of risk through the specification of the problem by looking at each portfolio constituents’ risk and marginal contributions. A famous case is the equal risk parity, where each and one of the assets is weighted to contribute an equal amount of risk to the portfolio. However, the problem with this approach is that the result can be driven by low vol assets and result portfolios inside of the efficient frontier. The authors wish to address the problems described above by embedding the risk budgeting as a layer of a neural network that uses the optimization step within the training procedure, implicitly defining the loss resulting from the problem solution. Further, they introduce stochastic gates to filter undesirable assets and propose an end-to-end solution for portfolio allocation through risk budgeting while also selecting assets that only pass through the gates. This is done without the need to estimate any parameters as the portfolio is optimized stochastically, with the control being a user-defined task loss. The authors test this on synthetic and empirical data sets and show that there is incremental benefit in this dynamic risk budget allocation approach in terms of performance and risk.

Fundamental reason
This strategy, albeit not explicitly an asset selection strategy by itself, addresses the problem of parameter estimation by using nonlinear methods to learn the optimal allocations. In this manner, one can compare it to the setup of a Reinforcement Learning agent as it dynamically allocates risk and optimizes the portfolio based on a loss. Fundamentally this can be explained by postulating that the net learns the optimal risk allocations similar to a portfolio manager that allocates risk based on his experience – for example, allocating lower amounts of risk to low vol assets or adjust budgets in a way so that the allocation adheres to his risk-return needs. Thus, this manual adjustment to the optimizer does not have to be known to the manager using the approach in this paper, as such assets can be filtered out through the use of stochastic gates.

Simple trading strategy
An ETF investment universe is constructed from seven ETFs: VTI, IWM, AGG, LQD, MUB, DBC and GLD. The sample spans the years 2011 through 2021. The period 2011-2016 is reserved for training and hyperparameter optimization, and 2017-2021 is used as a test set. A fully connected feedforward neural network is constructed with an input layer, two hidden layers with Leaky ReLU and Soft-max activation functions in the order of computation and a convex optimization layer embedding the risk budgeting convex optimization program. Finally, the last layer gives the asset allocation decision. The input layer takes in the historical returns and volatilities of each asset. Additionally, a stochastic gate that controls the assets fed into the risk budget layer is inserted in front of the optimization layer, as shown in Figure 10 of the computational graph. The neural networks are retrained every 25 days with a lookback of 150 days. The parameters are tuned in a linearly increasing fashion, with the learning rate of 150 and 10 steps being the optimal parameters. A relatively shallow definition of 32 neurons in a single hidden layer is used. The neural network is trained on the Sharpe ratio that defines the reward used in the computation of gradients in the backpropagation step. The full algorithm can be found on page 20. The portfolios are formed at the beginning of each month after the network is retrained and rebalanced accordingly by going long weighting by the vector of the output layer.

Hedge for stocks during bear markets
Not known - Authors do not look into the correlation properties of the resulting portfolio; however, this is also very dependent on the universe that is selected and fed into this optimization framework.