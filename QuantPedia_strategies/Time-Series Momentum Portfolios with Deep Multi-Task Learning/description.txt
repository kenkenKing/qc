The authors in this work show how using multi-task deep neural architecture to learn portfolio construction and auxiliary tasks at the same time improves the performance of the time-series momentum strategy. Furthermore, unlike the existing time-series momentum approach, approach presented in this study avoids the need to explicitly specify the momentum and position sizing rule. Major contributions of proposed multi-task learning time-series momentum model are:
1. a novel multi-task deep learning-based framework that results in improved time-series momentum portfolios,
2. the first implementation and study of multi-task learning in the context of portfolio construction,
3. extensive experimental analysis to understand the performance trade-offs resulting from using different auxiliary tasks.
The developed model learns portfolio construction as well as a variety of auxiliary tasks, such as forecasting realized volatility. Extensive experiments in this study showed that MTL-TSMOM outperforms the other multi-task baselines in terms of constructing a better risk-adjusted portfolio. Low correlation to the US MSCI Total Return Index’s returns was shown by the proposed model. The model can be presented as an extremely attractive diversifier to existing stocks and bonds portfolios.
Fundamental reason
Fundamental reason for functionality is based on recent progress in MTL. The authors presented a method for constructing a TSMOM portfolio using a deep multi-task learning model. This model includes the joint learning of portfolio construction together with various auxiliary tasks, such as forecasting realized volatility. In a detailed experiment, the authors demonstrate that their proposed approach consistently outperforms all benchmarks in risk-adjusted return, after accounting for transaction costs of up to 3 basis points. Their approach achieved an out-of-sample annualized return of 7.90% from the period of 1st January 2000 to 31st December 2020. The proposed model had also very good performance during the crisis from 2009 to 2012, as shown in Figure 3, top plot (dark blue).

Simple trading strategy
Individual futures contracts are unsuitable for analyzing long-term trends, as a result of expiry dates and variable liquidity. To deal with this issue, the authors used the Stevens Continuous Futures data feed (Stevens Analytics, 2020). Obtained through Nasdaq Data Link from January 1990 to December 2020. The Steven Continuous Futures data feed provides a long-term continuous price history for 78 of the most popular US and international futures contracts from various asset classes, including commodities, currencies, fixed income, and equity indexes futures. The continuous contract history of each asset spliced together using end-to-end concatenation with the prices adjusted using the backward-ratio method was used. The authors derived a set of time-series momentum features from the daily settled price of the continuous futures by taking the log returns over the past 1 trading day, 21 trading days, 63 trading days, 126 trading days, and finally 252 trading days. Also constructed features that would allow the proposed model to capture various asset risk dimensions were constructed. A number of portfolios to serve as the reference benchmarks for our proposed model’s performance were constructed (more details in part 4.3).
In the backtest results proposed model was trained from scratch every year using an expanding window cross-validation approach(Figure 2), with 20% of the training data kept as a validation set.
After training, the models to generate the portfolio on the test set was used, with each test set containing a year’s worth of out-of-sample results. Then, using data from January 1990 to December 2020, this expanding window out-of-sample generation was repeated 21 times, resulting in an out-of-sample backtest from January 2000 to December 2020.
Throughout the backtest the model was trained on the training data. During training, the loss functions (both the negative Sharpe loss function for the main task and negative correlation for the auxiliary tasks) were minimized using via Stochastic Gradient Descent (SGD) with the Adam optimizer and a learning rate set at 0.0001. Finally, the validation set was used to perform a grid search in order to find the best hyperparameters (shown in Table 1). The model training was terminated when it reaches 200 epochs. Early stopping was implemented, which terminates training before the 200 epochs are reached when there is no longer an increase in the validation loss (on the validation set) for 25 epochs.
Proposed Multi-task learning architecture consists of Long-Short Term Memory (LSTM) modules which serve as the shared layers. In these layers, the network parameters are shared across the various task-specific layers. Each task-specific layer is a feedforward network (FNN)layer, whereby each FNN learns a set of parameters that specialize in their respective task. More details can be found in Figure 1.
In this work, deep-MTL architecture with hard parameters sharing and distinguished between two types of tasks was used. The main task of the proposed model is constructing a time-series momentum portfolio. The auxiliary tasks, are included to enhance the model’s shared representation and allow the model to better gener alize for the main task.
For Table 2, the backtest metrics for all of the portfolios by aggregating the out-of-sample results from January 2000 to December 2020 was computed.
Then the net backtesting metrics by assuming a transaction cost of 3 basis points (bps) was dedicated.
During backtest, was applied volatility scaling to all portfolios, bringing the volatility to a target of 10%.
This rescaling also helped to enable comparisons between the cumulative returns of different strategies.
Hedge for stocks during bear markets
Yes - Figure 3 shows, that the strategy is definitely the great hedge against the bear markets.