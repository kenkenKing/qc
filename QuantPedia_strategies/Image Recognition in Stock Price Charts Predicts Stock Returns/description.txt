Using computer vision to extract trading signals is a relatively novel approach to portfolio construction. The idea that the interplay of technical analysis and human judgment can be reproduced by means of an algorithm is interesting because it tries to achieve what many traders deem impossible and attributable to “intuition”. Jiang, Kelly and Xiu present a framework using an approach called Convolutional Neural Networks that they apply on images of prices, claiming that this method, similar to a futures trader, extracts important signals and features from looking at price graphs. CNN’s are a class of ML models that utilize the connectivity between pixels of an image, drastically reducing the number of parameters needed for estimation. In this way it exploits the spatial relationship within the image and learns how to distinguish between images that are used for training the model with a standardized output such as the softmax. One way of thinking about the approach is that similar to a seasoned practitioner that knows his charts and often times specializes on a narrow set of instruments, the Machine Learning model learns this ability to observe patterns. This comes as no surprise as given the developed machinery, a computer is able to process the vastness of information much better than the human eye. The authors use OHLCV data of U.S. equities and represent their images in a 2D format, applying an abundance of filters and processing to provide a uniform picture of a price for the agent. They conjecture that this market is the most suitable one for training such a model due to data scarcity. They extend this argument by testing the model on international equity markets, having trained on the U.S market with results that are still able to outperform their benchmark. The method is compared with a linear factor approach with a conclusion that the nonlinear part of the model — the common contribution of the ML approach — has a positive predictive power compared to the benchmark. This renders the approach useful in extracting meaningful yet hard to interpret signals, as also confirmed by the authors. This is due to the fact, that the neural network guiding the learning process of the model cannot be understood intuitively in contrast to the decision of a human trader to bet on for example a short-term reversal based on judgment.

Fundamental reason
As described earlier, it is quite hard to discern a plausible answer for why a CNN learns the images the way it does, as imposing economic restrictions on Machine Learning models is a challenging task in general. One possible economic explanation for the outperformance of the portfolios constructed in this way is that it is essentially able to learn how to follow trends. Consequentially it is also adept at explaining shorter-term reversals because if the model is simply trained on a large enough sample of images featuring a reversal it can learn to detect one better. Interestingly, the source of alpha in this case comes from a very narrow increase in the prediction accuracy. Another feature that the CNN captures by looking at the spatial differences of the training pictures is volatility. By learning the ranges of the ticks it is displayed, it can distinguish better between the associated probability of a subsequent increase or a decrease in the price.

Simple trading strategy
The investment universe consists of stocks listed on NYSE, AMEX, and NASDAQ. The model (CNN) is fed the processed black and white tick images representing a price window of a given length. One building block of the model consists of three identifiable steps, and the number of blocks the model features is determined by the size of the price window used for training. For 5-day images, there are two blocks used; for 20-day images there are three (the representative strategy uses 20-day images) and for 60-day there are four blocks. The images are sparsely represented as a matrix of pixel values which passes first through a convolution layer of the network. This convolution layer is a filtering operation that uses a kernel to calculate some weighted average of the adjacent elements – pixels. Then it sums the products across the filtered matrix resulting in a convolution matrix that is further propagated in training. The size of the convolution filter used is 5 x 3. The stride of the filter is set to be 1 for the horizontal and 3 for the vertical stride. This determines the number of steps the filter takes as it moves through the matrix. Second, the output is passed through a Leaky ReLU activation function. The final operation in a block is max-pooling. This reduces the dimensionality of the outputs by looking at the matrix and detecting important signals that carry informative value. A 2×2 max-pooling layer is used to de-noise this matrix, effectively downsampling the size of the output before it is fed in the next block or final layer. After the last block in the model, the vector is flattened and fed into a fully connected softmax layer that outputs the final predictions. These predictions are the probabilities that the price of the stock will rise. The train set and test set are chosen randomly with 70% and 30% of samples respectively. The model training is done while minimizing the standard cross-entropy loss, Xavier initialized weights and Adam optimizer during SGD. The learning rate is set to be 1×10^-5 and the batch size 128. The batch is normalized with a 50% dropout and early stopping if the loss does not improve for two consecutive training episodes. The trained model is then used for predicting all the stocks in the holdout set and sorted based on the predicted probabilities. The top decile would represent the stocks identified as most likely to rise over the prediction window, and conversely the last decile is the set of stocks least likely to rise. Based on these sorts, a long-short portfolio is formed going long the top decile and short the bottom decile, rebalancing every week and weighing the stocks based on their market cap.

Hedge for stocks during bear markets
Not known - The paper does not offer insight into the hedging abilities of the strategy, but given the short evaluating and rebalancing period and the self-learning nature of the ML, it could work well also during crises.